#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> pbds;


class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        pbds st;
        vector<double> res;
        for(int i=0,j=0;i<nums.size();i++){
            st.insert(make_pair(nums[i],i));
            if((i-j+1)==k){
                if(k&1){
                    // cout<<*st.find_by_order(k/2)<<endl;
                    // cout<<st.size()<<endl;
                    pair<int,int>p=*st.find_by_order(k/2);
                    res.push_back(p.first);
                }
                else{
                    // cout<<((*st.find_by_order(k/2))+(*st.find_by_order((k/2)-1)))/2.0<<endl;
                    pair<int,int>p1,p2;
                    p1=*st.find_by_order(k/2);
                    p2=*st.find_by_order((k/2)-1);
                    res.push_back(p1.first/2.0+p2.first/2.0);
                }
                st.erase(make_pair(nums[j],j++));
            }
        }

        return res;
    }
};
