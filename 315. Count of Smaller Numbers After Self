#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
typedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> pbds;

class Solution {
public:
    vector<int> countSmaller(vector<int>& nums) {
        pbds s;
        int c=0;
        unordered_map<int,int>m;
        pair<int,int> p;
        int n=nums.size();
        vector<int> res(n,0);
        s.insert(make_pair(nums[n-1],1));
        m[nums[n-1]]=1;
        for(int i=n-2;i>=0;i--){
            p = make_pair(nums[i],0);
            res[i]=s.order_of_key(p);
            if(!m.count(nums[i])){
                m[nums[i]]=1;
            }
            else{
                m[nums[i]]++;
            }
            s.insert(make_pair(nums[i],m[nums[i]]));
        }
        return res;
    }
};
